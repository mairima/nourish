"""
Django settings for Nourish project.
Generated by 'django-admin startproject' using Django 3.2.25.
"""
from pathlib import Path
import os
from django.core.management.utils import get_random_secret_key
from django.core.exceptions import ImproperlyConfigured

# Load .env early if present
if os.path.exists(".env"):
    from dotenv import load_dotenv
    load_dotenv()

# ----------------------------------------------------------------------------- #
# Helpers
# ----------------------------------------------------------------------------- #
def env_bool(key: str, default: bool = False) -> bool:
    val = os.getenv(key)
    if val is None:
        return default
    return val.strip().lower() in {"1", "true", "t", "yes", "y", "on"}

# ----------------------------------------------------------------------------- #
# Paths
# ----------------------------------------------------------------------------- #
BASE_DIR = Path(__file__).resolve().parent.parent

# ----------------------------------------------------------------------------- #
# Core env-driven settings
# ----------------------------------------------------------------------------- #
DEBUG = env_bool("DJANGO_DEBUG", True)

SECRET_KEY = (os.getenv("DJANGO_SECRET_KEY") or "").strip()
if not SECRET_KEY:
    if DEBUG:
        SECRET_KEY = get_random_secret_key()
    else:
        raise ImproperlyConfigured("DJANGO_SECRET_KEY must be set when DEBUG=False")

# ALLOWED_HOSTS: accept comma-separated list in DJANGO_ALLOWED_HOSTS
ALLOWED_HOSTS: list[str] = []
hosts_csv = os.getenv("DJANGO_ALLOWED_HOSTS", "").strip()
if hosts_csv:
    for h in hosts_csv.split(","):
        h = h.strip()
        if h:
            print(f"Adding {h} to ALLOWED_HOSTS")
            ALLOWED_HOSTS.append(h)

# In dev, ensure localhost works even without env var
if DEBUG:
    for h in ("127.0.0.1", "localhost"):
        if h not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(h)

# ----------------------------------------------------------------------------- #
# Apps
# ----------------------------------------------------------------------------- #
INSTALLED_APPS = [
    # Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",

    # Cloudinary (storage must come BEFORE staticfiles)
    "cloudinary_storage",
    "django.contrib.staticfiles",
    "cloudinary",

    "django.contrib.sites",

    # Third-party auth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",

    # Local apps
    "home",
    "products",
    "bag",
    "checkout",

    # Other
    "crispy_forms",
]
SITE_ID = 1

# ----------------------------------------------------------------------------- #
# Middleware
# ----------------------------------------------------------------------------- #
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ----------------------------------------------------------------------------- #
# URLs / WSGI
# ----------------------------------------------------------------------------- #
ROOT_URLCONF = "nourish.urls"
WSGI_APPLICATION = "nourish.wsgi.application"
CRISPY_TEMPLATE_PACK = "bootstrap4"

# ----------------------------------------------------------------------------- #
# Templates
# ----------------------------------------------------------------------------- #
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
            BASE_DIR / "templates" / "allauth",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",  # required by allauth
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "bag.contexts.bag_contents",
                "django.template.context_processors.media",
            ],
            "builtins": [
                "crispy_forms.templatetags.crispy_forms_tags",
                "crispy_forms.templatetags.crispy_forms_field",
            ],
        },
    },
]

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

# ----------------------------------------------------------------------------- #
# Authentication / allauth
# ----------------------------------------------------------------------------- #
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_USERNAME_MIN_LENGTH = 4

LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# ----------------------------------------------------------------------------- #
# Database
# ----------------------------------------------------------------------------- #
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# ----------------------------------------------------------------------------- #
# Password validation
# ----------------------------------------------------------------------------- #
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ----------------------------------------------------------------------------- #
# I18N
# ----------------------------------------------------------------------------- #
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# ----------------------------------------------------------------------------- #
# Static & Media
# ----------------------------------------------------------------------------- #
STATIC_URL = "/static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
STATIC_ROOT = BASE_DIR / "staticfiles"

# Cloudinary media storage
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Optional project constants
FREE_DELIVERY_THRESHOLD = 50
STANDARD_DELIVERY_PERCENTAGE = 10

# ----------------------------------------------------------------------------- #
# Stripe
# ----------------------------------------------------------------------------- #
# Set these in your .env; leave empty in prod until configured.
STRIPE_PUBLIC_KEY = os.getenv(
    "STRIPE_PUBLIC_KEY",
    "pk_test_51LsAVSDbrSAzYrzcRSLdMAqeaXZkUNLmV0cXhl70xgfdimMu6ZPgf6orKSjM3KQR2JfEfxPjISBRhUV6xXX5WnyA00ZksvPBi2" if DEBUG else ""
)
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY", "" if not DEBUG else "sk_test_your_secret_here")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET", "")

# ----------------------------------------------------------------------------- #
# Production security (only when DEBUG=False)
# ----------------------------------------------------------------------------- #
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    CSRF_TRUSTED_ORIGINS = [
        o.strip() for o in os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",") if o.strip()
    ]

# ----------------------------------------------------------------------------- #
# Logging
# ----------------------------------------------------------------------------- #
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "root": {"handlers": ["console"], "level": "DEBUG" if DEBUG else "INFO"},
    "loggers": {
        "products": {"handlers": ["console"], "level": "DEBUG", "propagate": False},
    },
}

# ----------------------------------------------------------------------------- #
# Default PK type
# ----------------------------------------------------------------------------- #
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
