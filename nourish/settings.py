"""
Django settings for Nourish project.
Generated by 'django-admin startproject' using Django 3.2.25.
"""
import os
import sys
import dj_database_url
from pathlib import Path
from django.core.management.utils import get_random_secret_key

# Load .env early if present
if os.path.exists(".env"):
    from dotenv import load_dotenv
    load_dotenv()

# ----------------------------------------------------------------------------- #
# Paths
# ----------------------------------------------------------------------------- #
BASE_DIR = Path(__file__).resolve().parent.parent

# ----------------------------------------------------------------------------- #
# Core env-driven settings
# ----------------------------------------------------------------------------- #
DEBUG = os.environ.get("DJANGO_DEBUG", "False").lower() == "true"


SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", get_random_secret_key())
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# ALLOWED_HOSTS: accept comma-separated list in DJANGO_ALLOWED_HOSTS
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1',
    'http://localhost',
    'https://127.0.0.1'
]
host = os.environ.get("DJANGO_ALLOWED_HOSTS")
if host:
    ALLOWED_HOSTS.append(host)
    CSRF_TRUSTED_ORIGINS.append(f"https://{host}")
# ----------------------------------------------------------------------------- #
# Apps
# ----------------------------------------------------------------------------- #
INSTALLED_APPS = [
    # Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",

    # Cloudinary (storage must come BEFORE staticfiles)
    "cloudinary_storage",
    "django.contrib.staticfiles",
    "cloudinary",

    "django.contrib.sites",

    # Third-party auth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",

    # Local apps
    "home",
    "products",
    "bag",
    "checkout",
    "profiles",
    "newsletter",
    "contact",
    "faqs",

    # Other
    "crispy_forms",
    "crispy_bootstrap4",
    "django_countries",

]

CRISPY_TEMPLATE_PACK = "bootstrap4"
# For crispy-forms >=2.x this line is recommended:
CRISPY_ALLOWED_TEMPLATE_PACKS = ("bootstrap", "bootstrap4")

SITE_ID = 1

# ----------------------------------------------------------------------------- #
# Middleware
# ----------------------------------------------------------------------------- #
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ----------------------------------------------------------------------------- #
# URLs / WSGI
# ----------------------------------------------------------------------------- #
ROOT_URLCONF = "nourish.urls"
WSGI_APPLICATION = "nourish.wsgi.application"

# ----------------------------------------------------------------------------- #
# Templates
# ----------------------------------------------------------------------------- #
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR / "templates"),
            os.path.join(BASE_DIR / "templates" / "allauth"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",  # required by allauth
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "bag.contexts.bag_contents",
                "django.template.context_processors.media",
            ],
            "builtins": [
                "crispy_forms.templatetags.crispy_forms_tags",
                "crispy_forms.templatetags.crispy_forms_field",
            ],
        },
    },
]

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

# ----------------------------------------------------------------------------- #
# Authentication / allauth
# ----------------------------------------------------------------------------- #
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_USERNAME_MIN_LENGTH = 4

LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/"
ACCOUNT_LOGOUT_REDIRECT_URL = "/"
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "http"

# ----------------------------------------------------------------------------- #
# Database
# ----------------------------------------------------------------------------- #
if "DATABASE_URL" in os.environ:
    DATABASES = {
        "default": dj_database_url.parse(os.environ.get("DATABASE_URL"))
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

if 'test' in sys.argv:
    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'

# ----------------------------------------------------------------------------- #
# Password validation
# ----------------------------------------------------------------------------- #
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # noqa
    },
]

# ----------------------------------------------------------------------------- #
# I18N
# ----------------------------------------------------------------------------- #
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# ----------------------------------------------------------------------------- #
# Static & Media
# ----------------------------------------------------------------------------- #
STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Cloudinary media storage
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"

# Optional project constants
FREE_DELIVERY_THRESHOLD = 50
STANDARD_DELIVERY_PERCENTAGE = 10

# ----------------------------------------------------------------------------- #
# Stripe

# ----------------------------------------------------------------------------- #
STRIPE_CURRENCY = "usd"
# Set these in your .env; leave empty in prod until configured.
STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_PUBLIC_KEY")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = os.environ.get("STRIPE_WEBHOOK_SECRET")


if 'DEVELOPMENT' in os.environ:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = 'nourish@example.com'

else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = True
    EMAIL_PORT = 465
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASS')
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')

# Optional but recommended
    EMAIL_TIMEOUT = 20
    SERVER_EMAIL = DEFAULT_FROM_EMAIL  # used for system error emails

# ----------------------------------------------------------------------------- #
# Logging
# ----------------------------------------------------------------------------- #
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "root": {"handlers": ["console"], "level": "DEBUG" if DEBUG else "INFO"},
    "loggers": {
        "products": {"handlers": ["console"], "level": "DEBUG", "propagate": False},
    },
}

# ----------------------------------------------------------------------------- #
# Default PK type
# ----------------------------------------------------------------------------- #
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
